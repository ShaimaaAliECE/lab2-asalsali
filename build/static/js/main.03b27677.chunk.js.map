{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["checkLine","a","b","c","d","Hole","props","className","value","Slat","onClick","handleClick","Array","holes","length","map","x","j","Grid","state","boardState","fill","playerTurn","gameSelected","winner","remainingSquares","this","setState","slatID","boardCopy","arr","slice","indexOf","newSlat","reverse","newRemaining","console","log","makeMove","bs","r","checkWinner","alert","selectedGame","winnerMessageStyle","slats","i","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03b27677.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// check if all 4 hole ids are the same\nfunction checkLine(a,b,c,d) {\n  return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\nfunction Hole(props){\n  // button hole in grid wrapped in styling\n  return <div className=\"Hole\"><div className={props.value}><button className=\"piece\" /></div></div>\n}\n\nfunction Slat(props){\n  // slat is an array of holes with key/value pairs\n    return <div className=\"Slat\" onClick={() => props.handleClick()}>\n      {[...Array(props.holes.length)].map((x, j) => \n        <Hole key={j} value={props.holes[j]}></Hole>)}\n      </div>\n }\n\n\n// check winner by going through state of board\nfunction checkWinner(bs) {\nconsole.log(bs);\n  for (let c = 0; c < 7; c++)\n      for (let r = 0; r < 4; r++)\n          if (checkLine(bs[c][r], bs[c][r+1], bs[c][r+2], bs[c][r+3]))\n              return bs[c][r] + ' wins!'\n  for (let r = 0; r < 6; r++)\n       for (let c = 0; c < 4; c++)\n           if (checkLine(bs[c][r], bs[c+1][r], bs[c+2][r], bs[c+3][r]))\n               return bs[c][r] + ' wins!'\n  return \"\";\n}\n\nclass Grid extends Component {\n  // constructor\n  constructor() {\n    super();\n    // start with empty board and red starts\n    this.state = {\n      boardState: new Array(7).fill(new Array(6).fill(null)),\n      playerTurn: 'Red',\n      gameSelected: false,\n      winner: '',\n      remainingSquares: 42,\n    }\n  }\n\n  // set up board after button is clicked\n  selectedGame(){\n    this.setState({\n       gameSelected: true, \n       boardState: new Array(7).fill(new Array(6).fill(null)),\n       remainingSquares: 42,\n    })\n  }\n\n  \n  makeMove(slatID){\n    // create board copy\n    const boardCopy = this.state.boardState.map(function(arr) {\n      return arr.slice();\n    });\n    if (boardCopy[slatID].indexOf(null) !== -1) {\n      // change hole color\n      let newSlat = boardCopy[slatID].reverse()\n      newSlat[newSlat.indexOf(null)] = this.state.playerTurn\n      newSlat.reverse()\n      // decrement holes\n      const newRemaining = this.state.remainingSquares - 1;\n      // switch turn and copy the new board\n      this.setState({\n        playerTurn: (this.state.playerTurn === 'Red') ? 'Yellow' : 'Red',\n        boardState: boardCopy,\n        remainingSquares: newRemaining,\n      })\n      console.log(this.state.remainingSquares)\n    }\n  }\n\n  // make a move when there is no winner determined yet\n  handleClick(slatID) {\n    if(this.state.winner === ''){\n      this.makeMove(slatID)\n    }\n  }\n  \n  // check for winner or no remaining squares\n  componentDidUpdate(){\n    // set winner state\n    let winner = checkWinner(this.state.boardState)\n    if(this.state.winner !== winner){\n      this.setState({winner: winner})\n    }\n    //set winner to nobody\n    if (this.state.remainingSquares===0) {\n      alert(\"All holes are full\");\n      this.selectedGame();\n    }\n  }\n\n  render(){\n    // display winner message\n    let winnerMessageStyle\n    if(this.state.winner !== \"\"){\n      winnerMessageStyle = \"winnerMessage appear\"\n    } else {\n      winnerMessageStyle = \"winnerMessage\"\n    }\n\n    // builds grid with slats\n    let slats = [...Array(this.state.boardState.length)].map((x, i) => \n      <Slat \n          key={i}\n          holes={this.state.boardState[i]}\n          handleClick={() => this.handleClick(i)}\n      ></Slat>\n    )\n\n    // returns the game board if button isclicked\n    // return button if no game is selected or if there is a winner\n    return (\n      <div>\n        {this.state.gameSelected &&\n          <div className=\"Board\">\n            {slats}\n          </div>\n        }\n        <div className={winnerMessageStyle}>{this.state.winner}</div>\n        {(!this.state.gameSelected || this.state.winner !== '') &&\n          <div>\n            <button className=\"playButton\" onClick={() => this.selectedGame()}>Play Game</button>\n          </div>\n        }\n      </div>\n    )\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Game\">\n          <Grid />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}